//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LaserControl.AerotechHardware.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICameraService")]
    internal interface ICameraService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/SetDisplayingImageType", ReplyAction="http://tempuri.org/ICameraService/SetDisplayingImageTypeResponse")]
        void SetDisplayingImageType(int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/SetOverlay", ReplyAction="http://tempuri.org/ICameraService/SetOverlayResponse")]
        void SetOverlay(bool threshold, bool fixedCross, bool detectedCross);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/SetProcessing", ReplyAction="http://tempuri.org/ICameraService/SetProcessingResponse")]
        void SetProcessing(bool doprocessing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/SetThreshold", ReplyAction="http://tempuri.org/ICameraService/SetThresholdResponse")]
        void SetThreshold(int newThreshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/SetInvertThreshold", ReplyAction="http://tempuri.org/ICameraService/SetInvertThresholdResponse")]
        void SetInvertThreshold(bool inv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/GetImage", ReplyAction="http://tempuri.org/ICameraService/GetImageResponse")]
        System.IO.Stream GetImage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/GetXPercent", ReplyAction="http://tempuri.org/ICameraService/GetXPercentResponse")]
        double GetXPercent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/GetYPercent", ReplyAction="http://tempuri.org/ICameraService/GetYPercentResponse")]
        double GetYPercent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/TestIsConnected", ReplyAction="http://tempuri.org/ICameraService/TestIsConnectedResponse")]
        void TestIsConnected();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface ICameraServiceChannel : LaserControl.AerotechHardware.ServiceReference1.ICameraService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class CameraServiceClient : System.ServiceModel.ClientBase<LaserControl.AerotechHardware.ServiceReference1.ICameraService>, LaserControl.AerotechHardware.ServiceReference1.ICameraService {
        
        public CameraServiceClient() {
        }
        
        public CameraServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CameraServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetDisplayingImageType(int type) {
            base.Channel.SetDisplayingImageType(type);
        }
        
        public void SetOverlay(bool threshold, bool fixedCross, bool detectedCross) {
            base.Channel.SetOverlay(threshold, fixedCross, detectedCross);
        }
        
        public void SetProcessing(bool doprocessing) {
            base.Channel.SetProcessing(doprocessing);
        }
        
        public void SetThreshold(int newThreshold) {
            base.Channel.SetThreshold(newThreshold);
        }
        
        public void SetInvertThreshold(bool inv) {
            base.Channel.SetInvertThreshold(inv);
        }
        
        public System.IO.Stream GetImage() {
            return base.Channel.GetImage();
        }
        
        public double GetXPercent() {
            return base.Channel.GetXPercent();
        }
        
        public double GetYPercent() {
            return base.Channel.GetYPercent();
        }
        
        public void TestIsConnected() {
            base.Channel.TestIsConnected();
        }
    }
}
